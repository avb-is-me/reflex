"""Stub file for reflex/components/radix/themes/components/text_area.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import Any, Callable, Dict, Literal, Optional, Union, overload

from reflex.components.core.breakpoints import Breakpoints
from reflex.components.el import elements
from reflex.event import EventHandler, EventSpec
from reflex.ivars.base import ImmutableVar
from reflex.style import Style

from ..base import RadixThemesComponent

LiteralTextAreaSize = Literal["1", "2", "3"]
LiteralTextAreaResize = Literal["none", "vertical", "horizontal", "both"]

class TextArea(RadixThemesComponent, elements.Textarea):
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        size: Optional[
            Union[
                ImmutableVar[
                    Union[
                        Breakpoints[str, Literal["1", "2", "3"]], Literal["1", "2", "3"]
                    ]
                ],
                Literal["1", "2", "3"],
                Breakpoints[str, Literal["1", "2", "3"]],
            ]
        ] = None,
        variant: Optional[
            Union[
                ImmutableVar[Literal["classic", "surface", "soft"]],
                Literal["classic", "surface", "soft"],
            ]
        ] = None,
        resize: Optional[
            Union[
                ImmutableVar[
                    Union[
                        Breakpoints[
                            str, Literal["none", "vertical", "horizontal", "both"]
                        ],
                        Literal["none", "vertical", "horizontal", "both"],
                    ]
                ],
                Literal["none", "vertical", "horizontal", "both"],
                Breakpoints[str, Literal["none", "vertical", "horizontal", "both"]],
            ]
        ] = None,
        color_scheme: Optional[
            Union[
                ImmutableVar[
                    Literal[
                        "tomato",
                        "red",
                        "ruby",
                        "crimson",
                        "pink",
                        "plum",
                        "purple",
                        "violet",
                        "iris",
                        "indigo",
                        "blue",
                        "cyan",
                        "teal",
                        "jade",
                        "green",
                        "grass",
                        "brown",
                        "orange",
                        "sky",
                        "mint",
                        "lime",
                        "yellow",
                        "amber",
                        "gold",
                        "bronze",
                        "gray",
                    ]
                ],
                Literal[
                    "tomato",
                    "red",
                    "ruby",
                    "crimson",
                    "pink",
                    "plum",
                    "purple",
                    "violet",
                    "iris",
                    "indigo",
                    "blue",
                    "cyan",
                    "teal",
                    "jade",
                    "green",
                    "grass",
                    "brown",
                    "orange",
                    "sky",
                    "mint",
                    "lime",
                    "yellow",
                    "amber",
                    "gold",
                    "bronze",
                    "gray",
                ],
            ]
        ] = None,
        radius: Optional[
            Union[
                ImmutableVar[Literal["none", "small", "medium", "large", "full"]],
                Literal["none", "small", "medium", "large", "full"],
            ]
        ] = None,
        auto_complete: Optional[Union[ImmutableVar[bool], bool]] = None,
        auto_focus: Optional[Union[ImmutableVar[bool], bool]] = None,
        dirname: Optional[Union[ImmutableVar[str], str]] = None,
        disabled: Optional[Union[ImmutableVar[bool], bool]] = None,
        form: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        max_length: Optional[Union[ImmutableVar[int], int]] = None,
        min_length: Optional[Union[ImmutableVar[int], int]] = None,
        name: Optional[Union[ImmutableVar[str], str]] = None,
        placeholder: Optional[Union[ImmutableVar[str], str]] = None,
        read_only: Optional[Union[ImmutableVar[bool], bool]] = None,
        required: Optional[Union[ImmutableVar[bool], bool]] = None,
        rows: Optional[Union[ImmutableVar[str], str]] = None,
        value: Optional[Union[ImmutableVar[str], str]] = None,
        wrap: Optional[Union[ImmutableVar[str], str]] = None,
        auto_height: Optional[Union[ImmutableVar[bool], bool]] = None,
        cols: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        enter_key_submit: Optional[Union[ImmutableVar[bool], bool]] = None,
        access_key: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        auto_capitalize: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        content_editable: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        context_menu: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        dir: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        draggable: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        enter_key_hint: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        hidden: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        input_mode: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        item_prop: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        lang: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        role: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        slot: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        spell_check: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        tab_index: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        title: Optional[
            Union[ImmutableVar[Union[bool, int, str]], str, int, bool]
        ] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        id: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[ImmutableVar, str]]] = None,
        on_blur: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_change: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_context_menu: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_double_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_focus: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_key_down: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_key_up: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mount: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_down: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_up: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_scroll: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_unmount: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        **props,
    ) -> "TextArea":
        """Create an Input component.

        Args:
            *children: The children of the component.
            size: The size of the text area: "1" | "2" | "3"
            variant: The variant of the text area
            resize: The resize behavior of the text area: "none" | "vertical" | "horizontal" | "both"
            color_scheme: The color of the text area
            radius: The radius of the text area: "none" | "small" | "medium" | "large" | "full"
            auto_complete: Whether the form control should have autocomplete enabled
            auto_focus: Automatically focuses the textarea when the page loads
            dirname: Name part of the textarea to submit in 'dir' and 'name' pair when form is submitted
            disabled: Disables the textarea
            form: Associates the textarea with a form (by id)
            max_length: Maximum number of characters allowed in the textarea
            min_length: Minimum number of characters required in the textarea
            name: Name of the textarea, used when submitting the form
            placeholder: Placeholder text in the textarea
            read_only: Indicates whether the textarea is read-only
            required: Indicates that the textarea is required
            rows: Visible number of lines in the text control
            value: The controlled value of the textarea, read only unless used with on_change
            wrap: How the text in the textarea is to be wrapped when submitting the form
            auto_height: Automatically fit the content height to the text (use min-height with this prop)
            cols: Visible width of the text control, in average character widths
            enter_key_submit: Enter key submits form (shift-enter adds new line)
            access_key:  Provides a hint for generating a keyboard shortcut for the current element.
            auto_capitalize: Controls whether and how text input is automatically capitalized as it is entered/edited by the user.
            content_editable: Indicates whether the element's content is editable.
            context_menu: Defines the ID of a <menu> element which will serve as the element's context menu.
            dir: Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)
            draggable: Defines whether the element can be dragged.
            enter_key_hint: Hints what media types the media element is able to play.
            hidden: Defines whether the element is hidden.
            input_mode: Defines the type of the element.
            item_prop: Defines the name of the element for metadata purposes.
            lang: Defines the language used in the element.
            role: Defines the role of the element.
            slot: Assigns a slot in a shadow DOM shadow tree to an element.
            spell_check: Defines whether the element may be checked for spelling errors.
            tab_index: Defines the position of the current element in the tabbing order.
            title: Defines a tooltip for the element.
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The properties of the component.

        Returns:
            The component.
        """
        ...

text_area = TextArea.create
