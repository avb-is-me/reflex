"""Stub file for reflex/components/recharts/polar.py"""

# ------------------- DO NOT EDIT ----------------------
# This file was generated by `reflex/utils/pyi_generator.py`!
# ------------------------------------------------------
from typing import Any, Callable, Dict, List, Literal, Optional, Union, overload

from reflex.constants.colors import Color
from reflex.event import EventHandler, EventSpec
from reflex.ivars.base import ImmutableVar
from reflex.style import Style

from .recharts import (
    Recharts,
)

class Pie(Recharts):
    def get_event_triggers(self) -> dict[str, Union[ImmutableVar, Any]]: ...
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        data: Optional[
            Union[ImmutableVar[List[Dict[str, Any]]], List[Dict[str, Any]]]
        ] = None,
        data_key: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        cx: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        cy: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        inner_radius: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        outer_radius: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        start_angle: Optional[Union[ImmutableVar[int], int]] = None,
        end_angle: Optional[Union[ImmutableVar[int], int]] = None,
        min_angle: Optional[Union[ImmutableVar[int], int]] = None,
        padding_angle: Optional[Union[ImmutableVar[int], int]] = None,
        name_key: Optional[Union[ImmutableVar[str], str]] = None,
        legend_type: Optional[
            Union[
                ImmutableVar[
                    Literal[
                        "line",
                        "plainline",
                        "square",
                        "rect",
                        "circle",
                        "cross",
                        "diamond",
                        "star",
                        "triangle",
                        "wye",
                        "none",
                    ]
                ],
                Literal[
                    "line",
                    "plainline",
                    "square",
                    "rect",
                    "circle",
                    "cross",
                    "diamond",
                    "star",
                    "triangle",
                    "wye",
                    "none",
                ],
            ]
        ] = None,
        label: Optional[Union[ImmutableVar[bool], bool]] = None,
        label_line: Optional[Union[ImmutableVar[bool], bool]] = None,
        stroke: Optional[Union[ImmutableVar[Union[Color, str]], str, Color]] = None,
        fill: Optional[Union[ImmutableVar[Union[Color, str]], str, Color]] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        id: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[ImmutableVar, str]]] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        **props,
    ) -> "Pie":
        """Create the component.

        Args:
            *children: The children of the component.
            data: data
            data_key: The key of each sector's value.
            cx: The x-coordinate of center. If set a percentage, the final value is obtained by multiplying the percentage of container width.
            cy: The y-coordinate of center. If set a percentage, the final value is obtained by multiplying the percentage of container height.
            inner_radius: The inner radius of pie, which can be set to a percent value.
            outer_radius: The outer radius of pie, which can be set to a percent value.
            start_angle: The angle of first sector.
            end_angle: The direction of sectors. 1 means clockwise and -1 means anticlockwise.
            min_angle: The minimum angle of each unzero data.
            padding_angle: The angle between two sectors.
            name_key: The key of each sector's name.
            legend_type: The type of icon in legend. If set to 'none', no legend item will be rendered.
            label: If false set, labels will not be drawn.
            label_line: If false set, label lines will not be drawn.
            stroke: Stoke color
            fill: Fill color
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class Radar(Recharts):
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        data_key: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        points: Optional[
            Union[ImmutableVar[List[Dict[str, Any]]], List[Dict[str, Any]]]
        ] = None,
        dot: Optional[Union[ImmutableVar[bool], bool]] = None,
        stroke: Optional[Union[ImmutableVar[Union[Color, str]], str, Color]] = None,
        fill: Optional[Union[ImmutableVar[str], str]] = None,
        fill_opacity: Optional[Union[ImmutableVar[float], float]] = None,
        legend_type: Optional[Union[ImmutableVar[str], str]] = None,
        label: Optional[Union[ImmutableVar[bool], bool]] = None,
        animation_begin: Optional[Union[ImmutableVar[int], int]] = None,
        animation_duration: Optional[Union[ImmutableVar[int], int]] = None,
        animation_easing: Optional[
            Union[
                ImmutableVar[
                    Literal["ease", "ease-in", "ease-out", "ease-in-out", "linear"]
                ],
                Literal["ease", "ease-in", "ease-out", "ease-in-out", "linear"],
            ]
        ] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        id: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[ImmutableVar, str]]] = None,
        on_blur: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_context_menu: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_double_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_focus: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mount: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_down: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_up: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_scroll: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_unmount: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        **props,
    ) -> "Radar":
        """Create the component.

        Args:
            *children: The children of the component.
            data_key: The key of a group of data which should be unique in a radar chart.
            points: The coordinates of all the vertexes of the radar shape, like [{ x, y }].
            dot: If false set, dots will not be drawn
            stroke: Stoke color
            fill: Fill color
            fill_opacity: opacity
            legend_type: The type of icon in legend. If set to 'none', no legend item will be rendered.
            label: If false set, labels will not be drawn
            animation_begin: Specifies when the animation should begin, the unit of this option is ms.
            animation_duration: Specifies the duration of animation, the unit of this option is ms.
            animation_easing: The type of easing function. 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear'
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class RadialBar(Recharts):
    def get_event_triggers(self) -> dict[str, Union[ImmutableVar, Any]]: ...
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        data_key: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        min_angle: Optional[Union[ImmutableVar[int], int]] = None,
        legend_type: Optional[Union[ImmutableVar[str], str]] = None,
        label: Optional[
            Union[ImmutableVar[Union[Dict[str, Any], bool]], bool, Dict[str, Any]]
        ] = None,
        background: Optional[
            Union[ImmutableVar[Union[Dict[str, Any], bool]], bool, Dict[str, Any]]
        ] = None,
        is_animation_active: Optional[Union[ImmutableVar[bool], bool]] = None,
        animation_begin: Optional[Union[ImmutableVar[int], int]] = None,
        animation_duration: Optional[Union[ImmutableVar[int], int]] = None,
        animation_easing: Optional[
            Union[
                ImmutableVar[
                    Literal["ease", "ease-in", "ease-out", "ease-in-out", "linear"]
                ],
                Literal["ease", "ease-in", "ease-out", "ease-in-out", "linear"],
            ]
        ] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        id: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[ImmutableVar, str]]] = None,
        on_animation_end: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_animation_start: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        **props,
    ) -> "RadialBar":
        """Create the component.

        Args:
            *children: The children of the component.
            data_key: The key of a group of data which should be unique to show the meaning of angle axis.
            min_angle: Min angle of each bar. A positive value between 0 and 360.
            legend_type: Type of legend
            label: If false set, labels will not be drawn.
            background: If false set, background sector will not be drawn.
            is_animation_active: If set false, animation of radial bars will be disabled. By default true in CSR, and false in SSR
            animation_begin: Specifies when the animation should begin, the unit of this option is ms. By default 0
            animation_duration: Specifies the duration of animation, the unit of this option is ms. By default 1500
            animation_easing: The type of easing function. 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear'. By default 'ease'
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class PolarAngleAxis(Recharts):
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        data_key: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        cx: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        cy: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        radius: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        axis_line: Optional[
            Union[ImmutableVar[Union[Dict[str, Any], bool]], bool, Dict[str, Any]]
        ] = None,
        axis_line_type: Optional[Union[ImmutableVar[str], str]] = None,
        tick_line: Optional[
            Union[ImmutableVar[Union[Dict[str, Any], bool]], bool, Dict[str, Any]]
        ] = None,
        tick: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        ticks: Optional[
            Union[ImmutableVar[List[Dict[str, Any]]], List[Dict[str, Any]]]
        ] = None,
        orient: Optional[Union[ImmutableVar[str], str]] = None,
        stroke: Optional[Union[ImmutableVar[Union[Color, str]], str, Color]] = None,
        allow_duplicated_category: Optional[Union[ImmutableVar[bool], bool]] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        id: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[ImmutableVar, str]]] = None,
        on_blur: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_context_menu: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_double_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_focus: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mount: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_down: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_up: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_scroll: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_unmount: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        **props,
    ) -> "PolarAngleAxis":
        """Create the component.

        Args:
            *children: The children of the component.
            data_key: The key of a group of data which should be unique to show the meaning of angle axis.
            cx: The x-coordinate of center. If set a percentage, the final value is obtained by multiplying the percentage of container width.
            cy: The y-coordinate of center. If set a percentage, the final value is obtained by multiplying the percentage of container height.
            radius: The outer radius of circle grid. If set a percentage, the final value is obtained by multiplying the percentage of maxRadius which is calculated by the width, height, cx, cy.
            axis_line: If false set, axis line will not be drawn. If true set, axis line will be drawn which have the props calculated internally. If object set, axis line will be drawn which have the props mergered by the internal calculated props and the option.
            axis_line_type: The type of axis line.
            tick_line: If false set, tick lines will not be drawn. If true set, tick lines will be drawn which have the props calculated internally. If object set, tick lines will be drawn which have the props mergered by the internal calculated props and the option.
            tick: The width or height of tick.
            ticks: The array of every tick's value and angle.
            orient: The orientation of axis text.
            stroke: The stroke color of axis
            allow_duplicated_category: Allow the axis has duplicated categorys or not when the type of axis is "category".
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class PolarGrid(Recharts):
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        cx: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        cy: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        inner_radius: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        outer_radius: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        polar_angles: Optional[Union[ImmutableVar[List[int]], List[int]]] = None,
        polar_radius: Optional[Union[ImmutableVar[List[int]], List[int]]] = None,
        grid_type: Optional[
            Union[
                ImmutableVar[Literal["polygon", "circle"]], Literal["polygon", "circle"]
            ]
        ] = None,
        stroke: Optional[Union[ImmutableVar[Union[Color, str]], str, Color]] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        id: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[ImmutableVar, str]]] = None,
        on_blur: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_context_menu: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_double_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_focus: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mount: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_down: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_up: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_scroll: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_unmount: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        **props,
    ) -> "PolarGrid":
        """Create the component.

        Args:
            *children: The children of the component.
            cx: The x-coordinate of center. If set a percentage, the final value is obtained by multiplying the percentage of container width.
            cy: The y-coordinate of center. If set a percentage, the final value is obtained by multiplying the percentage of container height.
            inner_radius: The radius of the inner polar grid.
            outer_radius: The radius of the outer polar grid.
            polar_angles: The array of every line grid's angle.
            polar_radius: The array of every line grid's radius.
            grid_type: The type of polar grids. 'polygon' | 'circle'
            stroke: The stroke color of grid
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

class PolarRadiusAxis(Recharts):
    def get_event_triggers(self) -> dict[str, Union[ImmutableVar, Any]]: ...
    @overload
    @classmethod
    def create(  # type: ignore
        cls,
        *children,
        angle: Optional[Union[ImmutableVar[int], int]] = None,
        type_: Optional[
            Union[
                ImmutableVar[Literal["number", "category"]],
                Literal["number", "category"],
            ]
        ] = None,
        allow_duplicated_category: Optional[Union[ImmutableVar[bool], bool]] = None,
        cx: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        cy: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        reversed: Optional[Union[ImmutableVar[bool], bool]] = None,
        orientation: Optional[Union[ImmutableVar[str], str]] = None,
        axis_line: Optional[
            Union[ImmutableVar[Union[Dict[str, Any], bool]], bool, Dict[str, Any]]
        ] = None,
        tick: Optional[Union[ImmutableVar[Union[int, str]], str, int]] = None,
        tick_count: Optional[Union[ImmutableVar[int], int]] = None,
        scale: Optional[
            Union[
                ImmutableVar[
                    Literal[
                        "auto",
                        "linear",
                        "pow",
                        "sqrt",
                        "log",
                        "identity",
                        "time",
                        "band",
                        "point",
                        "ordinal",
                        "quantile",
                        "quantize",
                        "utc",
                        "sequential",
                        "threshold",
                    ]
                ],
                Literal[
                    "auto",
                    "linear",
                    "pow",
                    "sqrt",
                    "log",
                    "identity",
                    "time",
                    "band",
                    "point",
                    "ordinal",
                    "quantile",
                    "quantize",
                    "utc",
                    "sequential",
                    "threshold",
                ],
            ]
        ] = None,
        domain: Optional[Union[ImmutableVar[List[int]], List[int]]] = None,
        stroke: Optional[Union[ImmutableVar[Union[Color, str]], str, Color]] = None,
        style: Optional[Style] = None,
        key: Optional[Any] = None,
        id: Optional[Any] = None,
        class_name: Optional[Any] = None,
        autofocus: Optional[bool] = None,
        custom_attrs: Optional[Dict[str, Union[ImmutableVar, str]]] = None,
        on_click: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_enter: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_leave: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_move: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_out: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        on_mouse_over: Optional[
            Union[EventHandler, EventSpec, list, Callable, ImmutableVar]
        ] = None,
        **props,
    ) -> "PolarRadiusAxis":
        """Create the component.

        Args:
            *children: The children of the component.
            angle: The angle of radial direction line to display axis text.
            type_: The type of axis line. 'number' | 'category'
            allow_duplicated_category: Allow the axis has duplicated categorys or not when the type of axis is "category".
            cx: The x-coordinate of center.
            cy: The y-coordinate of center.
            reversed: If set to true, the ticks of this axis are reversed.
            orientation: The orientation of axis text.
            axis_line: If false set, axis line will not be drawn. If true set, axis line will be drawn which have the props calculated internally. If object set, axis line will be drawn which have the props mergered by the internal calculated props and the option.
            tick: The width or height of tick.
            tick_count: The count of ticks.
            scale: If 'auto' set, the scale funtion is linear scale. 'auto' | 'linear' | 'pow' | 'sqrt' | 'log' | 'identity' | 'time' | 'band' | 'point' | 'ordinal' | 'quantile' | 'quantize' | 'utc' | 'sequential' | 'threshold'
            domain: The domain of the polar radius axis, specifying the minimum and maximum values.
            stroke: The stroke color of axis
            style: The style of the component.
            key: A unique key for the component.
            id: The id for the component.
            class_name: The class name for the component.
            autofocus: Whether the component should take the focus once the page is loaded
            custom_attrs: custom attribute
            **props: The props of the component.

        Returns:
            The component.
        """
        ...

pie = Pie.create
radar = Radar.create
radial_bar = RadialBar.create
polar_angle_axis = PolarAngleAxis.create
polar_grid = PolarGrid.create
polar_radius_axis = PolarRadiusAxis.create
